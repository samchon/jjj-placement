{"version":3,"sources":["utils/ArrayUtil.ts","utils/FileSystem.ts","reportWebVitals.ts","modules/material.ts","modules/icons.ts","components/Paragraph.tsx","movies/OutputMovie.tsx","components/TextInput.tsx","App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","material","icons","ArrayUtil","count","closure","ret","i","push","FileSystem","fileName","content","blob","Blob","type","anchor","document","createElement","href","URL","createObjectURL","download","body","appendChild","dispatchEvent","MouseEvent","removeChild","revokeObjectURL","Paragraph","props","index","Number","variant","substr","Fragment","Typography","title","Divider","children","repeat","OutputMovie","row","map","str","TextInput","value","getter","error","trim","defaultValue","onChange","event","written","target","nullable","setter","App","React","useState","deckCount","setDeckCount","setRepeat","data","k","shuffle","fullWidth","label","toString","Button","onClick","join","buffer","iconv","encode","startIcon","CloudDownloadOutlined","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f82b8b9c.chunk.js","sourcesContent":["export namespace ArrayUtil\r\n{\r\n    export function repeat<T>(count: number, closure: (index: number) => T): T[]\r\n    {\r\n        const ret: T[] = [];\r\n        for (let i: number = 0; i < count; ++i)\r\n            ret.push(closure(i));\r\n        return ret;\r\n    }\r\n}","export namespace FileSystem\r\n{\r\n    export function download(fileName: string, content: Buffer): void\r\n    {\r\n        const blob: Blob = new Blob([content], { type: \"text/plan\" });\r\n        const anchor: HTMLAnchorElement = document.createElement(\"a\");\r\n        anchor.href = URL.createObjectURL(blob);\r\n        anchor.download = fileName;\r\n\r\n        document.body.appendChild(anchor);\r\n        anchor.dispatchEvent(new MouseEvent(\"click\"));\r\n        document.body.removeChild(anchor);\r\n        URL.revokeObjectURL(anchor.href);\r\n    }\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as material from \"@material-ui/core\";\r\nexport default material;","import * as icons from \"@material-ui/icons\";\r\nexport default icons;","import React from \"react\";\r\nimport material from \"../modules/material\";\r\n\r\nimport { ArrayUtil } from \"../utils/ArrayUtil\";\r\n\r\nexport function Paragraph(props: Paragraph.IProps): JSX.Element\r\n{\r\n    const index: number = Number(props.variant.substr(1));\r\n\r\n    return <React.Fragment>\r\n        <material.Typography variant={`h${index + 3}` as \"h1\"}>\r\n            {props.title}\r\n        </material.Typography>\r\n        {index <= 2\r\n            ? <material.Divider />\r\n            : null\r\n        }\r\n        <br/>\r\n        {props.children}\r\n        {ArrayUtil.repeat(index <= 2 ? 4 : 2, () => <br/>)}\r\n    </React.Fragment>;\r\n}\r\n\r\nexport namespace Paragraph\r\n{\r\n    export interface IProps\r\n    {\r\n        variant: `h${number}`;\r\n        title: string;\r\n        children: React.ReactNode;\r\n    }\r\n}","import { Paragraph } from \"../components/Paragraph\";\r\n\r\nexport function OutputMovie(props: OutputMovie.IProps): JSX.Element\r\n{\r\n    return <Paragraph variant=\"h3\" title={`반복수 ${props.index + 1}`}>\r\n        <table>\r\n            <tr>\r\n                <th> 처리구 번호 </th>\r\n            </tr>\r\n        {props.row.map(str =>\r\n            <tr>\r\n                <td> {str} </td>\r\n            </tr>\r\n        )}\r\n        </table>\r\n    </Paragraph>;\r\n}\r\n\r\nexport namespace OutputMovie\r\n{\r\n    export interface IProps\r\n    {\r\n        index: number;\r\n        row: string[];\r\n    }\r\n}","import * as material from \"@material-ui/core\";\r\n\r\nexport function TextInput<Nullable extends boolean = false>\r\n    (props: TextInput.IProps<Nullable>)\r\n{\r\n    const value: string | null = props.getter();\r\n\r\n    return <material.TextField {...(props as any)}\r\n        error={props.error \r\n            ? props.error \r\n            : props.getter() !== null && props.getter()!.trim() === \"\"}\r\n        defaultValue={value ? value : \"\"}\r\n        onChange={event => \r\n        {\r\n            const written: string = (event.target as any).value;\r\n            const value: TextInput.Value<Nullable> = (props.nullable === true && written === \"\")\r\n                ? null as TextInput.Value<Nullable>\r\n                : written as TextInput.Value<Nullable>;\r\n\r\n            props.setter(value);\r\n        }} />;\r\n}\r\n\r\nexport namespace TextInput\r\n{\r\n    export type IProps<Nullable extends boolean = false> = \r\n        Omit<material.TextFieldProps, \"defaultValue\"|\"value\"|\"onChange\"> &\r\n    {\r\n        getter: () => Value<Nullable>;\r\n        setter: (value: Value<Nullable>) => void;\r\n        nullable?: Nullable;\r\n    };\r\n\r\n    export type Value<Nullable extends boolean> = \r\n        Nullable extends true\r\n            ? string | null\r\n            : string;\r\n}","import React from \"react\";\r\nimport material from \"./modules/material\";\r\nimport icons from \"./modules/icons\";\r\nimport iconv from \"iconv-lite\";\r\nimport { shuffle } from \"tstl/ranges/algorithm/modifiers\";\r\n\r\nimport { ArrayUtil } from \"./utils/ArrayUtil\";\r\nimport { FileSystem } from \"./utils/FileSystem\";\r\n\r\nimport { OutputMovie } from \"./movies/OutputMovie\";\r\nimport { Paragraph } from \"./components/Paragraph\";\r\nimport { TextInput } from \"./components/TextInput\";\r\n\r\nexport default function App()\r\n{\r\n    const [deckCount, setDeckCount] = React.useState(10);\r\n    const [repeat, setRepeat] = React.useState(4);\r\n    \r\n    const data: string[][] = ArrayUtil.repeat(repeat, index =>\r\n    {\r\n        const row: string[] = ArrayUtil.repeat(deckCount, k => \r\n        {\r\n            return `T${k+1}-${index+1}`;\r\n        });\r\n        shuffle(row);\r\n        return row;\r\n    });\r\n\r\n    function download(): void\r\n    {\r\n        const content: string = data.map(row =>\r\n        {\r\n            return \"index\\n\" \r\n                + row.join(\"\\n\");\r\n        }).join(\"\\n\\n\");\r\n\r\n        const buffer: Buffer = iconv.encode(content, \"euc-kr\");\r\n        FileSystem.download(\"placement.csv\", buffer);\r\n    }\r\n\r\n    return <React.Fragment>\r\n        <Paragraph variant=\"h2\" title=\"Input\">\r\n            <TextInput fullWidth \r\n                    type=\"number\"\r\n                    label=\"처리구 수\"\r\n                    getter={() => deckCount.toString()}\r\n                    setter={str => setDeckCount(Number(str))} />\r\n            <TextInput fullWidth\r\n                    type=\"number\"\r\n                    label=\"반복 수\"\r\n                    getter={() => repeat.toString()}\r\n                    setter={str => setRepeat(Number(str))} />\r\n        </Paragraph>\r\n        <Paragraph variant=\"h2\" title=\"Output\">\r\n            <material.Button fullWidth\r\n                    variant=\"contained\"\r\n                    onClick={() => download()}\r\n                    startIcon={ <icons.CloudDownloadOutlined /> }>\r\n                Download\r\n            </material.Button>\r\n            <br/><br/>\r\n            {data.map((row, index) =>\r\n                <OutputMovie index={index} row={row} />\r\n            )}\r\n        </Paragraph>\r\n    </React.Fragment>\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}